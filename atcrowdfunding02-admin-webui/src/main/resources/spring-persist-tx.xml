<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!-- 配置自动扫描的包,主要是为了把service扫描到ioc容器中 -->
    <context:component-scan base-package="com.atguigu.crowd.service"/>

    <!-- 配置事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 此处报异常可以不用解决，原因是spring-persist-mybatis.xml正常加载后在ioc容器重视能找到的 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事务切面 -->
    <aop:config>
        <!-- 此处由Service改为ServiceImpl的原因是springSecurity中有一个UserDerailService接口，也符合表达式，如果写成Service的话会报错 -->
        <!-- 考虑到后面要整合springSecurity，避免把UserDerailService加入事务控制，让切入点表达式定位到ServiceImpl -->
        <aop:pointcut id="txPointcut" expression="execution(* *..*ServiceImpl.*(..))"/>

        <!-- 将切入点表达式和事务通知关联起来 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!-- 配置事务的通知 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">

        <!-- 配置事务的属性 -->
        <tx:attributes>
            <!-- 查询方法：配置只读属性 让数据库知道这是一个查询操作，能够进行一定的优化 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>

            <!-- 增删改方法：配置事务的传播行为、回滚异常 -->
            <!--
                propagation属性：
                    REQUIRED:默认值，表示当前方法必须工作在事务中，如果当前县城没有已经开启的事务，则自己开新事务，如果已经有了，那么就使用这个已有的事务(不用这个，因为相当于和别人绑在一条船上，别人回滚了自己也要回滚)
                    REQUIRES_NEW：建议使用的值，表示当前方法必须工作在事务中，如果当前县城没有已经开启的事务，则自己开新事务，就算是已经有了事务也再自己开启的事务中运行
            -->
            <!--
             rollback-for属性：配置事务方法针对什么样的异常回滚
                默认：根据运行时异常回滚
                建议：编译时异常和运行时异常都回滚
             -->
            <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
        </tx:attributes>

    </tx:advice>
</beans>